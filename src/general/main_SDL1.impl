/* A simple program to show how to set up an X window for OpenGL rendering.
 * X86 compilation: gcc -o -L/usr/X11/lib   main main.c -lGL -lX11
 * X64 compilation: gcc -o -L/usr/X11/lib64 main main.c -lGL -lX11
 */
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "SDL/SDL.h"
#include "SDL/SDL_main.h"

#include "openglnat.h"
#ifdef EMSCRIPTEN
#include "emscripten.h"
#endif // EMSCRIPTEN
#include "render/Mesh.h"
#include "Juego.h"
Juego* juego;
ControlCamara* controlCamara;
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
void fatalError(char *message)
{
  fprintf(stderr, "main: %s\n", message);
  exit(1);
}

static void quit( int code )
{
    /*
     * Quit SDL so we can release the fullscreen
     * mode and restore the previous video settings,
     * etc.
     */
     delete juego;
    SDL_Quit();

    /* Exit program. */
    exit( code );
}

float camRotX=0;
float camRotY=0;
float camRotZ=0;

float camMovX=0;
float camMovY=0;
float camMovZ=0;

static void manejarTecla( SDL_keysym* keysym ,bool presionada)
{

    switch( keysym->sym ) {
    case SDLK_ESCAPE:
#ifndef EMSCRIPTEN
        quit( 0 );
#endif
        break;
     case SDLK_w:
          camMovY=presionada?1:0;
          break;
     case SDLK_s:
          camMovY=presionada?-1:0;;
          break;
     case SDLK_a:
          camMovX=presionada?-1:0;
          break;
     case SDLK_d:
          camMovX=presionada?1:0;
          break;
     case SDLK_q:
          camMovZ=presionada?-1:0;
          break;
     case SDLK_e:
          camMovZ=presionada?1:0;
          break;
     case SDLK_LEFT:
          camRotZ=presionada?1:0;
          break;
     case SDLK_RIGHT:
          camRotZ=presionada?-1:0;
          break;
     case SDLK_UP:
          camRotX=presionada?1:0;
          break;
     case SDLK_DOWN:
          camRotX=presionada?-1:0;
          break;
     case SDLK_SPACE:
          break;
    default:
        break;
    }

}

static void procesar_eventos( void )
{
    /* Our SDL event placeholder. */
    SDL_Event event;

    /* Grab all the events off the queue. */
    while( SDL_PollEvent( &event ) ) {

        switch( event.type ) {
        case SDL_MOUSEMOTION:
            std::cout<<"raton:"<<event.motion.xrel<<","<<event.motion.yrel<<std::endl;
//            camRotZ=-event.motion.xrel*0.11;
  //          camRotX=-event.motion.yrel*0.11;
            break;
        case SDL_KEYDOWN:
            /* Handle key presses. */
            manejarTecla(&event.key.keysym,true);
            break;
        case SDL_KEYUP:
            /* Handle key presses. */
            manejarTecla(&event.key.keysym,false);
            break;
        case SDL_QUIT:
            /* Handle quit requests (like Ctrl-c). */
            quit( 0 );
            break;
        }

    }

}

static void setup_opengl( int width, int height )
{


      /*** (8) configure the OpenGL context for rendering ***/

       glEnable(GL_DEPTH_TEST); /* enable depth buffering */
       glDepthFunc(GL_LESS);    /* pedantic, GL_LESS is the default */
       glClearDepth(1.0);       /* pedantic, 1.0 is the default */

       /* frame buffer clears should be to black */
       glClearColor(0.0, 0.0, 0.0, 0.0);

       /* set up projection transform */
      // glMatrixMode(GL_PROJECTION);
       //glLoadIdentity();

       /* establish initial viewport */
       /* pedantic, full window size is default viewport */
       glViewport(0, 0, width, height);
}

void game_loop(){

         //std::cout<<"dibujar"<<std::endl;
         procesar_eventos();
         controlCamara->teclaMovimiento(camMovX*10,camMovY*10,camMovZ*10);
         controlCamara->ejes(camRotX*10,camRotZ*10);
         glClearColor(1,1,1,1);
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
         juego->loop();
         SDL_GL_SwapBuffers( );

}
int main(int argc, char* argv[])
{
/* Information about the current video settings. */
    const SDL_VideoInfo* info = NULL;
    /* Dimensions of our window. */
    int width = SCREEN_WIDTH;
    int height = SCREEN_HEIGHT;
    /* Color depth in bits of our window. */
    int bpp = 0;
    /* Flags we will pass into SDL_SetVideoMode. */
    int flags = 0;

    /* First, initialize SDL's video subsystem. */
    if( SDL_Init( SDL_INIT_VIDEO ) < 0 ) {
        /* Failed, exit. */
        fprintf( stderr, "Video initialization failed: %s\n",
             SDL_GetError( ) );
        quit( 1 );
    }

    /* Let's get some video information. */
    info = SDL_GetVideoInfo( );

    if( !info ) {
        /* This should probably never happen. */
        fprintf( stderr, "Video query failed: %s\n",
             SDL_GetError( ) );
        quit( 1 );
    }

    /*
     * Set our width/height to 640/480 (you would
     * of course let the user decide this in a normal
     * app). We get the bpp we will request from
     * the display. On X11, VidMode can't change
     * resolution, so this is probably being overly
     * safe. Under Win32, ChangeDisplaySettings
     * can change the bpp.
     */
    bpp = info->vfmt->BitsPerPixel;

    /*
     * Now, we want to setup our requested
     * window attributes for our OpenGL window.
     * We want *at least* 5 bits of red, green
     * and blue. We also want at least a 16-bit
     * depth buffer.
     *
     * The last thing we do is request a double
     * buffered window. '1' turns on double
     * buffering, '0' turns it off.
     *
     * Note that we do not use SDL_DOUBLEBUF in
     * the flags to SDL_SetVideoMode. That does
     * not affect the GL attribute state, only
     * the standard 2D blitting setup.
     */
    SDL_GL_SetAttribute( SDL_GL_RED_SIZE, 5 );
    SDL_GL_SetAttribute( SDL_GL_GREEN_SIZE, 5 );
    SDL_GL_SetAttribute( SDL_GL_BLUE_SIZE, 5 );
    SDL_GL_SetAttribute( SDL_GL_DEPTH_SIZE, 16 );
    SDL_GL_SetAttribute( SDL_GL_DOUBLEBUFFER, 1 );

    /*
     * We want to request that SDL provide us
     * with an OpenGL window, in a fullscreen
     * video mode.
     *
     * EXERCISE:
     * Make starting windowed an option, and
     * handle the resize events properly with
     * glViewport.
     */
    flags = SDL_OPENGL ;

    /*
     * Set the video mode
     */
    if( SDL_SetVideoMode( width, height, bpp, flags ) == 0 ) {
        /*
         * This could happen for a variety of reasons,
         * including DISPLAY not being set, the specified
         * resolution not being available, etc.
         */
        fprintf( stderr, "Video mode set failed: %s\n",
             SDL_GetError( ) );
        quit( 1 );
    }

    /*
     * At this point, we should have a properly setup
     * double-buffered window for use with OpenGL.
     */
    setup_opengl( width, height );
#ifndef EMSCRIPTEN
    GLenum err = glewInit();
    if (GLEW_OK != err)
    {
      /* Problem: glewInit failed, something is seriously wrong. */
      fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
    }
    fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));
#endif
    juego=new Juego();
    controlCamara=juego;
  /*** (9) dispatch X events ***/

     #ifdef EMSCRIPTEN
       emscripten_set_main_loop(game_loop, 30,0);
     #else
    while(1){
       game_loop();
     }
     #endif // EMSCRIPTEN

  return 0;
}
